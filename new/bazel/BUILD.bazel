load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load("@makeheaders//rules:makeheaders.bzl", "makeheaders")

load("//config/cc:CONFIG.bzl",
     "BASE_COPTS",
     "BASE_LINKOPTS",
     "PROFILE")

exports_files(["emit_build_bazel.c",
               "emit_ocaml_repo.c",
               "emit_pkg_bindir.c",
               "registry.c",])

# TOOLCHAINS = ["//:module_profiles"]

###########
cc_library(
    name = "bazel",
    srcs = [
        "emit_build_bazel.c",
        "emit_ocaml_repo.c",
        "emit_pkg_bindir.c",
        "registry.c",
        "utils.c",
        ":mkhdrs",
    ],
    includes = [".", "$(GENDIR)"],
    alwayslink = True,
    linkopts = select({
        # static linkage under -c opt: we need to retain
        # one symbol from libdune_s7:
        "@platforms//os:macos": [
            "-Xlinker", "-exported_symbol",
            "-Xlinker", "'_libdune_s7_init'"],
        "//conditions:default": []
    }),
    implementation_deps = [
        "@dune_s7//lib:dune_s7",
        "@findlibc//lib:findlibc",
        "@opamc//lib:opamc",
        "//src/utils",
        "@libs7//lib:s7",
    ],
    copts = BASE_COPTS + [
        # "-I$(GENDIR)/$(@findlibc)/src",
        # "-I$(@libs7)/src",
        # "-I$(GENDIR)/$(@libs7)/src",
        # "-I$(GENDIR)/$(@opamc)/src",
        # "-I$(@liblogc)/src",
        # "-I$(@semverc)/src",
        # "-I$(@uthash)/src",
        # "-I$(GENDIR)/$(@)/new",
        # "-I$(GENDIR)/$(@)/new/bazel",

        "-Wno-gnu-statement-expression-from-macro-expansion"
    ],
    defines = PROFILE + select({
        ## for dirent->d_type macros:
        "@platforms//os:linux": ["_DEFAULT_SOURCE"],
        "//conditions:default": []
    }),
    data  = [
        "//new/templates:bazel_wrapper.sh",
        # WARNING: keep in sync with //opam/BUILD.bazel
        "//new/templates/ocaml:ocaml_bigarray.BUILD",
        "//new/templates/ocaml:ocaml_bigarray_alias.BUILD",
        "//new/templates/ocaml:ocaml_c_api.BUILD",
        "//new/templates/ocaml:ocaml_compiler-libs.BUILD",
        "//new/templates/ocaml:ocaml_compiler-libs_alias.BUILD",
        "//new/templates/ocaml/compiler_libs:bytecomp.BUILD",
        "//new/templates/ocaml/compiler_libs:common.BUILD",
        "//new/templates/ocaml/compiler_libs:optcomp.BUILD",
        "//new/templates/ocaml/compiler_libs:toplevel.BUILD",
        "//new/templates/ocaml/compiler_libs:native_toplevel.BUILD",
        "//new/templates/ocaml:ocaml_dynlink.BUILD",
        "//new/templates/ocaml:ocaml_dynlink_alias.BUILD",
        "//new/templates/ocaml:ocaml_num.BUILD",
        "//new/templates/ocaml:ocaml_ocamldoc.BUILD",
        "//new/templates/ocaml:ocaml_runtime.BUILD",
        "//new/templates/ocaml/runtime:runtime_sys.BUILD",
        "//new/templates/ocaml/runtime:runtime_vm.BUILD",
        "//new/templates/ocaml:ocaml_rtevents.BUILD",
        "//new/templates/ocaml:ocaml_rtevents_alias.BUILD",
        "//new/templates/ocaml:ocaml_stdlib.BUILD",
        "//new/templates/ocaml:ocaml_stdlib_alias.BUILD",
        "//new/templates/ocaml:ocaml_str.BUILD",
        "//new/templates/ocaml:ocaml_str_alias.BUILD",

        "//new/templates/platform:arch.BUILD",
        "//new/templates/platform:emitter.BUILD",
        "//new/templates/platform:executor.BUILD",
        "//new/templates/platform:platform.BUILD",

        "//new/templates:toolchain/adapters/local.BUILD",
        "//new/templates:toolchain/adapters/local.BUILD.mustache",
        "//new/templates:toolchain/adapters/linux/x86_64.BUILD",
        "//new/templates:toolchain/adapters/linux/arm.BUILD",
        "//new/templates:toolchain/adapters/macos/x86_64.BUILD",
        "//new/templates:toolchain/adapters/macos/arm.BUILD",
        "//new/templates:toolchain/profiles/profiles.BUILD",
        "//new/templates:toolchain/selectors/local.BUILD",
        "//new/templates:toolchain/selectors/linux/x86_64.BUILD",
        "//new/templates:toolchain/selectors/linux/arm.BUILD",
        "//new/templates:toolchain/selectors/macos/arm.BUILD",
        "//new/templates:toolchain/selectors/macos/x86_64.BUILD",
        # "//new/templates/host/bazel:BUILD.bazel",
        # "//new/templates/host/build:BUILD.bazel",
        # "//new/templates/host/target:BUILD.bazel",
        "//new/templates/ocaml:ocaml_threads.BUILD",
        "//new/templates/ocaml:ocaml_threads_alias.BUILD",
        "//new/templates/ocaml:ocaml_unix.BUILD",
        "//new/templates/ocaml:ocaml_unix_alias.BUILD",
        "//new/templates/ocaml:ocaml_version.BUILD",
    ],
    # toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "emit_build_bazel.c",
        "emit_ocaml_repo.c",
        "emit_pkg_bindir.c",
        "registry.c",
        "utils.c"
    ],
    additional_srcs = [
        "//new:coswitch.c",
        "//src/utils:utils.c",
        "@makeheaders//logging:ansi_colors.h",
    ] + select({
        "@makeheaders//compilation_mode:fastbuild": [
            "@makeheaders//logging:macros_debug.h"
        ],
        "//conditions:default": [
            "@makeheaders//logging:macros_ndebug.h"
        ]
    }),
    # ] + select({
    #     "//config/compilation_mode:fastbuild?": [
    #         "//src:macros_debug.h",
    #     ],
    #     "//conditions:default":   [
    #         "//src:macros_ndebug.h",
    #     ]
    # }),
    visibility = ["//visibility:public"]
)
