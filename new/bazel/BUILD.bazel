load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load("@makeheaders//src:RULES.bzl", "makeheaders")
# load("@lemon//src:BUILD.bzl", "lemon")

load("//config/cc:CONFIG.bzl",
     COPTS = "BASE_COPTS",
     "BASE_DEFINES")

DEFINES = BASE_DEFINES
# + ["TRACING"]

exports_files(["emit_build_bazel.c",
               "emit_ocaml_repo.c",
               "emit_pkg_bindir.c",
               "registry.c",])

TOOLCHAINS = ["//:repo_paths"]

###########
cc_library(
    name = "bazel",
    srcs = [
        "emit_build_bazel.c",
        "emit_ocaml_repo.c",
        "emit_pkg_bindir.c",
        "registry.c",
        "utils.c",
        ":mkhdrs",
    ],
    deps = [
        "@libs7//src:s7",
        "@dune_s7//src:dune_s7",

        "@findlibc//src:findlibc",
        "@liblogc//src:logc",
        "@opamc//src:opamc",
        "@semverc//src:semverc",
        "@uthash//src:uthash",
        "//src/utils"
    ],
    copts = COPTS + [
        "-I$(GENDIR)/$(@findlibc)/src",
        "-I$(@libs7)/src",
        "-I$(GENDIR)/$(@libs7)/src",
        "-I$(GENDIR)/$(@opamc)/src",
        "-I$(@liblogc)/src",
        "-I$(@semverc)/src",
        "-I$(@uthash)/src",
        "-I$(GENDIR)/$(@)/new",
        "-I$(GENDIR)/$(@)/new/bazel",
    ],
    local_defines = DEFINES,
    data  = [
        "//new/templates/ocaml:ocaml_bigarray.BUILD",
        "//new/templates/ocaml:ocaml_c_api.BUILD",
        "//new/templates/ocaml:ocaml_compiler-libs.BUILD",
        "//new/templates/ocaml/compiler_libs:bytecomp.BUILD",
        "//new/templates/ocaml/compiler_libs:common.BUILD",
        "//new/templates/ocaml/compiler_libs:optcomp.BUILD",
        "//new/templates/ocaml/compiler_libs:toplevel.BUILD",
        "//new/templates/ocaml/compiler_libs:native_toplevel.BUILD",
        "//new/templates/ocaml:ocaml_dynlink.BUILD",
        "//new/templates/ocaml:ocaml_dynlink_alias.BUILD",
        "//new/templates/ocaml:ocaml_num.BUILD",
        "//new/templates/ocaml:ocaml_ocamldoc.BUILD",
        "//new/templates/ocaml:ocaml_runtime.BUILD",
        "//new/templates/ocaml:ocaml_rtevents.BUILD",
        "//new/templates/ocaml:ocaml_rtevents_alias.BUILD",
        "//new/templates/ocaml:ocaml_stdlib.BUILD",
        "//new/templates/ocaml:ocaml_stdlib_alias.BUILD",
        "//new/templates/ocaml:ocaml_str.BUILD",
        "//new/templates/ocaml:ocaml_str_alias.BUILD",

        "//new/templates/platform:platform.BUILD",
        "//new/templates/platform:arch.BUILD",
        "//new/templates/platform:executor.BUILD",
        "//new/templates/platform:emitter.BUILD",

        "//new/templates:toolchain/adapters/local.BUILD",
        "//new/templates:toolchain/adapters/local.BUILD.mustache",
        "//new/templates:toolchain/adapters/linux/x86_64.BUILD",
        "//new/templates:toolchain/adapters/linux/arm.BUILD",
        "//new/templates:toolchain/adapters/macos/x86_64.BUILD",
        "//new/templates:toolchain/adapters/macos/arm.BUILD",
        "//new/templates:toolchain/profiles/profiles.BUILD",
        "//new/templates:toolchain/selectors/local.BUILD",
        "//new/templates:toolchain/selectors/linux/x86_64.BUILD",
        "//new/templates:toolchain/selectors/linux/arm.BUILD",
        "//new/templates:toolchain/selectors/macos/arm.BUILD",
        "//new/templates:toolchain/selectors/macos/x86_64.BUILD",
        # "//new/templates/host/bazel:BUILD.bazel",
        # "//new/templates/host/build:BUILD.bazel",
        # "//new/templates/host/target:BUILD.bazel",
        "//new/templates/ocaml:ocaml_threads.BUILD",
        "//new/templates/ocaml:ocaml_threads_alias.BUILD",
        "//new/templates/ocaml:ocaml_unix.BUILD",
        "//new/templates/ocaml:ocaml_unix_alias.BUILD",
    ],
    # ] + select({
    #     "//compilation_mode:dbg?": ["//src:debug"],
    #     "//conditions:default": []
    # }),
    toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "emit_build_bazel.c",
        "emit_ocaml_repo.c",
        "emit_pkg_bindir.c",
        "registry.c",
        "utils.c"
    ],
    additional_srcs = [
        "//src:ansi_colors.h",
        "//src/utils:utils.c"
    ] + select({
        "//config/profile:dev?": [
            "//src:trace_dev.h",
        ],
        "//conditions:default":   [
            "//src:trace_prod.h",
        ]
    }),

    visibility = ["//visibility:public"]
)
